package JavaAdvanced.ExamPreparation.RetakeExam_16Dec2020;

import java.util.Scanner;

public class Selling_2 {

    private static int sellerRow = 0;
    private static int sellerCol = 0;
    private static int money = 0;

    public static void main(String[] args) {
        Scanner scanner = new Scanner((System.in));

        int n = Integer.parseInt(scanner.nextLine());
        char[][] matrix = new char[n][n];
        for (int row = 0; row < n; row++) {
            String line = scanner.nextLine();
            matrix[row] = line.toCharArray();
            if (line.contains("S")) {
                sellerRow = row;
                sellerCol = line.indexOf("S");
            }
        }

        boolean isWithinTheBakery = true;

        while (money < 50 && isWithinTheBakery) {
            String command = scanner.nextLine();
            if (command.equals("up")) {
                isWithinTheBakery = move(sellerRow - 1, sellerCol, matrix);
            } else if (command.equals("down")) {
                isWithinTheBakery = move(sellerRow + 1, sellerCol, matrix);
            } else if (command.equals("left")) {
                isWithinTheBakery = move(sellerRow, sellerCol - 1, matrix);
            } else if (command.equals("right")) {
                isWithinTheBakery = move(sellerRow, sellerCol + 1, matrix);
            }
        }

        if (isWithinTheBakery) {
            System.out.println("Good news! You succeeded in collecting enough money!");
        } else {
            System.out.println("Bad news, you are out of the bakery.");
        }
        System.out.printf("Money: %d%n", money);
        printMatrix(matrix);
    }

    //client -> single Digit
    //pillar -> 'O' -> 0 or 2
    //empty position '-'
    private static boolean move(int newRow, int newCol, char[][] matrix) {
        matrix[sellerRow][sellerCol] = '-';
        if (isOutOfTheMatrix(newRow, newCol, matrix)) {
            return false;
        }
        if (Character.isDigit(matrix[newRow][newCol])) {
            money += matrix[newRow][newCol] - '0';
        } else if (matrix[newRow][newCol] == 'O') {
            matrix[newRow][newCol] = '-';
            int[] secondPillarLocation = findSecondPillar(matrix);
            newRow = secondPillarLocation[0];
            newCol = secondPillarLocation[1];
        }
        matrix[newRow][newCol] = 'S';
        sellerRow = newRow;
        sellerCol = newCol;
        return true;
    }

    public static int[] findSecondPillar(char[][] matrix) {
        int[] indexes = null;
        for (int row = 0; row < matrix.length; row++) {
            for (int col = 0; col < matrix[row].length; col++) {
                if (matrix[row][col] == 'O') {
                    indexes = new int[]{row, col};
                    break;
                }
            }
            if (indexes != null) {
                break;
            }
        }
        return indexes;
    }

    private static boolean isOutOfTheMatrix(int row, int col, char[][] matrix) {
        return row < 0 || row >= matrix.length
                || col < 0 || col >= matrix[row].length;
    }


    private static void printMatrix(char[][] matrix) {
        for (int row = 0; row < matrix.length; row++) {
            for (int col = 0; col < matrix[row].length; col++) {
                System.out.print(matrix[row][col]);
            }
            System.out.println();
        }
    }

}
